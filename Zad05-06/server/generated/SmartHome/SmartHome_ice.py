# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.7
#
# <auto-generated>
#
# Generated from file `SmartHome.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module SmartHome
_M_SmartHome = Ice.openModule('SmartHome')
__name__ = 'SmartHome'

if 'BaseSetting' not in _M_SmartHome.__dict__:
    _M_SmartHome.BaseSetting = Ice.createTempClass()
    class BaseSetting(Ice.Value):
        def __init__(self):
            pass

        def ice_id(self):
            return '::SmartHome::BaseSetting'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::BaseSetting'

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_BaseSetting)

        __repr__ = __str__

    _M_SmartHome._t_BaseSetting = IcePy.defineValue('::SmartHome::BaseSetting', BaseSetting, -1, (), False, False, None, ())
    BaseSetting._ice_type = _M_SmartHome._t_BaseSetting

    _M_SmartHome.BaseSetting = BaseSetting
    del BaseSetting

if 'BaseReading' not in _M_SmartHome.__dict__:
    _M_SmartHome.BaseReading = Ice.createTempClass()
    class BaseReading(Ice.Value):
        def __init__(self):
            pass

        def ice_id(self):
            return '::SmartHome::BaseReading'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::BaseReading'

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_BaseReading)

        __repr__ = __str__

    _M_SmartHome._t_BaseReading = IcePy.defineValue('::SmartHome::BaseReading', BaseReading, -1, (), False, False, None, ())
    BaseReading._ice_type = _M_SmartHome._t_BaseReading

    _M_SmartHome.BaseReading = BaseReading
    del BaseReading

if '_t_Settings' not in _M_SmartHome.__dict__:
    _M_SmartHome._t_Settings = IcePy.defineSequence('::SmartHome::Settings', (), _M_SmartHome._t_BaseSetting)

if '_t_Readings' not in _M_SmartHome.__dict__:
    _M_SmartHome._t_Readings = IcePy.defineSequence('::SmartHome::Readings', (), _M_SmartHome._t_BaseReading)

if 'UnsupportedSettingException' not in _M_SmartHome.__dict__:
    _M_SmartHome.UnsupportedSettingException = Ice.createTempClass()
    class UnsupportedSettingException(Ice.UserException):
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::UnsupportedSettingException'

    _M_SmartHome._t_UnsupportedSettingException = IcePy.defineException('::SmartHome::UnsupportedSettingException', UnsupportedSettingException, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    UnsupportedSettingException._ice_type = _M_SmartHome._t_UnsupportedSettingException

    _M_SmartHome.UnsupportedSettingException = UnsupportedSettingException
    del UnsupportedSettingException

if 'InvalidSettingValueException' not in _M_SmartHome.__dict__:
    _M_SmartHome.InvalidSettingValueException = Ice.createTempClass()
    class InvalidSettingValueException(Ice.UserException):
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::InvalidSettingValueException'

    _M_SmartHome._t_InvalidSettingValueException = IcePy.defineException('::SmartHome::InvalidSettingValueException', InvalidSettingValueException, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    InvalidSettingValueException._ice_type = _M_SmartHome._t_InvalidSettingValueException

    _M_SmartHome.InvalidSettingValueException = InvalidSettingValueException
    del InvalidSettingValueException

if 'NameSetting' not in _M_SmartHome.__dict__:
    _M_SmartHome.NameSetting = Ice.createTempClass()
    class NameSetting(_M_SmartHome.BaseSetting):
        def __init__(self, newName=''):
            _M_SmartHome.BaseSetting.__init__(self)
            self.newName = newName

        def ice_id(self):
            return '::SmartHome::NameSetting'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::NameSetting'

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_NameSetting)

        __repr__ = __str__

    _M_SmartHome._t_NameSetting = IcePy.defineValue('::SmartHome::NameSetting', NameSetting, -1, (), False, False, _M_SmartHome._t_BaseSetting, (('newName', (), IcePy._t_string, False, 0),))
    NameSetting._ice_type = _M_SmartHome._t_NameSetting

    _M_SmartHome.NameSetting = NameSetting
    del NameSetting

if 'DeviceMetadata' not in _M_SmartHome.__dict__:
    _M_SmartHome.DeviceMetadata = Ice.createTempClass()
    class DeviceMetadata(_M_SmartHome.BaseReading):
        def __init__(self, deviceName='', serialNo=0):
            _M_SmartHome.BaseReading.__init__(self)
            self.deviceName = deviceName
            self.serialNo = serialNo

        def ice_id(self):
            return '::SmartHome::DeviceMetadata'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::DeviceMetadata'

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_DeviceMetadata)

        __repr__ = __str__

    _M_SmartHome._t_DeviceMetadata = IcePy.defineValue('::SmartHome::DeviceMetadata', DeviceMetadata, -1, (), False, False, _M_SmartHome._t_BaseReading, (
        ('deviceName', (), IcePy._t_string, False, 0),
        ('serialNo', (), IcePy._t_int, False, 0)
    ))
    DeviceMetadata._ice_type = _M_SmartHome._t_DeviceMetadata

    _M_SmartHome.DeviceMetadata = DeviceMetadata
    del DeviceMetadata

_M_SmartHome._t_ISmartDevice = IcePy.defineValue('::SmartHome::ISmartDevice', Ice.Value, -1, (), False, True, None, ())

if 'ISmartDevicePrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.ISmartDevicePrx = Ice.createTempClass()
    class ISmartDevicePrx(Ice.ObjectPrx):

        def getData(self, context=None):
            return _M_SmartHome.ISmartDevice._op_getData.invoke(self, ((), context))

        def getDataAsync(self, context=None):
            return _M_SmartHome.ISmartDevice._op_getData.invokeAsync(self, ((), context))

        def begin_getData(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.ISmartDevice._op_getData.begin(self, ((), _response, _ex, _sent, context))

        def end_getData(self, _r):
            return _M_SmartHome.ISmartDevice._op_getData.end(self, _r)

        def changeSettings(self, settings, context=None):
            return _M_SmartHome.ISmartDevice._op_changeSettings.invoke(self, ((settings, ), context))

        def changeSettingsAsync(self, settings, context=None):
            return _M_SmartHome.ISmartDevice._op_changeSettings.invokeAsync(self, ((settings, ), context))

        def begin_changeSettings(self, settings, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.ISmartDevice._op_changeSettings.begin(self, ((settings, ), _response, _ex, _sent, context))

        def end_changeSettings(self, _r):
            return _M_SmartHome.ISmartDevice._op_changeSettings.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.ISmartDevicePrx.ice_checkedCast(proxy, '::SmartHome::ISmartDevice', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.ISmartDevicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::ISmartDevice'
    _M_SmartHome._t_ISmartDevicePrx = IcePy.defineProxy('::SmartHome::ISmartDevice', ISmartDevicePrx)

    _M_SmartHome.ISmartDevicePrx = ISmartDevicePrx
    del ISmartDevicePrx

    _M_SmartHome.ISmartDevice = Ice.createTempClass()
    class ISmartDevice(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::ISmartDevice')

        def ice_id(self, current=None):
            return '::SmartHome::ISmartDevice'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::ISmartDevice'

        def getData(self, current=None):
            raise NotImplementedError("servant method 'getData' not implemented")

        def changeSettings(self, settings, current=None):
            raise NotImplementedError("servant method 'changeSettings' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_ISmartDeviceDisp)

        __repr__ = __str__

    _M_SmartHome._t_ISmartDeviceDisp = IcePy.defineClass('::SmartHome::ISmartDevice', ISmartDevice, (), None, ())
    ISmartDevice._ice_type = _M_SmartHome._t_ISmartDeviceDisp

    ISmartDevice._op_getData = IcePy.Operation('getData', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_Readings, False, 0), ())
    ISmartDevice._op_changeSettings = IcePy.Operation('changeSettings', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_SmartHome._t_Settings, False, 0),), (), None, (_M_SmartHome._t_UnsupportedSettingException, _M_SmartHome._t_InvalidSettingValueException))

    _M_SmartHome.ISmartDevice = ISmartDevice
    del ISmartDevice

if 'SmartDevice' not in _M_SmartHome.__dict__:
    _M_SmartHome.SmartDevice = Ice.createTempClass()
    class SmartDevice(Ice.Value):
        def __init__(self, deviceData=None):
            self.deviceData = deviceData

        def ice_id(self):
            return '::SmartHome::SmartDevice'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::SmartDevice'

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_SmartDevice)

        __repr__ = __str__

    _M_SmartHome._t_SmartDevice = IcePy.declareValue('::SmartHome::SmartDevice')

    _M_SmartHome._t_SmartDevice = IcePy.defineValue('::SmartHome::SmartDevice', SmartDevice, -1, (), False, False, None, (('deviceData', (), _M_SmartHome._t_DeviceMetadata, False, 0),))
    SmartDevice._ice_type = _M_SmartHome._t_SmartDevice

    _M_SmartHome.SmartDevice = SmartDevice
    del SmartDevice

if 'BulbulatorData' not in _M_SmartHome.__dict__:
    _M_SmartHome.BulbulatorData = Ice.createTempClass()
    class BulbulatorData(_M_SmartHome.BaseReading):
        def __init__(self, minIntensity=1, maxIntensity=10, currentIntensity=3):
            _M_SmartHome.BaseReading.__init__(self)
            self.minIntensity = minIntensity
            self.maxIntensity = maxIntensity
            self.currentIntensity = currentIntensity

        def ice_id(self):
            return '::SmartHome::BulbulatorData'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::BulbulatorData'

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_BulbulatorData)

        __repr__ = __str__

    _M_SmartHome._t_BulbulatorData = IcePy.defineValue('::SmartHome::BulbulatorData', BulbulatorData, -1, (), False, False, _M_SmartHome._t_BaseReading, (
        ('minIntensity', (), IcePy._t_short, False, 0),
        ('maxIntensity', (), IcePy._t_short, False, 0),
        ('currentIntensity', (), IcePy._t_short, False, 0)
    ))
    BulbulatorData._ice_type = _M_SmartHome._t_BulbulatorData

    _M_SmartHome.BulbulatorData = BulbulatorData
    del BulbulatorData

if 'BulbingIntensitySetting' not in _M_SmartHome.__dict__:
    _M_SmartHome.BulbingIntensitySetting = Ice.createTempClass()
    class BulbingIntensitySetting(_M_SmartHome.BaseSetting):
        def __init__(self, intensity=0):
            _M_SmartHome.BaseSetting.__init__(self)
            self.intensity = intensity

        def ice_id(self):
            return '::SmartHome::BulbingIntensitySetting'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::BulbingIntensitySetting'

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_BulbingIntensitySetting)

        __repr__ = __str__

    _M_SmartHome._t_BulbingIntensitySetting = IcePy.defineValue('::SmartHome::BulbingIntensitySetting', BulbingIntensitySetting, -1, (), False, False, _M_SmartHome._t_BaseSetting, (('intensity', (), IcePy._t_short, False, 0),))
    BulbingIntensitySetting._ice_type = _M_SmartHome._t_BulbingIntensitySetting

    _M_SmartHome.BulbingIntensitySetting = BulbingIntensitySetting
    del BulbingIntensitySetting

_M_SmartHome._t_IBulbulator = IcePy.defineValue('::SmartHome::IBulbulator', Ice.Value, -1, (), False, True, None, ())

if 'IBulbulatorPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.IBulbulatorPrx = Ice.createTempClass()
    class IBulbulatorPrx(_M_SmartHome.ISmartDevicePrx):

        def bulbul(self, capital, context=None):
            return _M_SmartHome.IBulbulator._op_bulbul.invoke(self, ((capital, ), context))

        def bulbulAsync(self, capital, context=None):
            return _M_SmartHome.IBulbulator._op_bulbul.invokeAsync(self, ((capital, ), context))

        def begin_bulbul(self, capital, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.IBulbulator._op_bulbul.begin(self, ((capital, ), _response, _ex, _sent, context))

        def end_bulbul(self, _r):
            return _M_SmartHome.IBulbulator._op_bulbul.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.IBulbulatorPrx.ice_checkedCast(proxy, '::SmartHome::IBulbulator', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.IBulbulatorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::IBulbulator'
    _M_SmartHome._t_IBulbulatorPrx = IcePy.defineProxy('::SmartHome::IBulbulator', IBulbulatorPrx)

    _M_SmartHome.IBulbulatorPrx = IBulbulatorPrx
    del IBulbulatorPrx

    _M_SmartHome.IBulbulator = Ice.createTempClass()
    class IBulbulator(_M_SmartHome.ISmartDevice):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::IBulbulator', '::SmartHome::ISmartDevice')

        def ice_id(self, current=None):
            return '::SmartHome::IBulbulator'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::IBulbulator'

        def bulbul(self, capital, current=None):
            raise NotImplementedError("servant method 'bulbul' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_IBulbulatorDisp)

        __repr__ = __str__

    _M_SmartHome._t_IBulbulatorDisp = IcePy.defineClass('::SmartHome::IBulbulator', IBulbulator, (), None, (_M_SmartHome._t_ISmartDeviceDisp,))
    IBulbulator._ice_type = _M_SmartHome._t_IBulbulatorDisp

    IBulbulator._op_bulbul = IcePy.Operation('bulbul', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_bool, False, 0),), (), ((), IcePy._t_string, False, 0), ())

    _M_SmartHome.IBulbulator = IBulbulator
    del IBulbulator

if 'Bulbulator' not in _M_SmartHome.__dict__:
    _M_SmartHome.Bulbulator = Ice.createTempClass()
    class Bulbulator(_M_SmartHome.SmartDevice):
        def __init__(self, deviceData=None, bulbulatorData=None):
            _M_SmartHome.SmartDevice.__init__(self, deviceData)
            self.bulbulatorData = bulbulatorData

        def ice_id(self):
            return '::SmartHome::Bulbulator'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Bulbulator'

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_Bulbulator)

        __repr__ = __str__

    _M_SmartHome._t_Bulbulator = IcePy.declareValue('::SmartHome::Bulbulator')

    _M_SmartHome._t_Bulbulator = IcePy.defineValue('::SmartHome::Bulbulator', Bulbulator, -1, (), False, False, _M_SmartHome._t_SmartDevice, (('bulbulatorData', (), _M_SmartHome._t_BulbulatorData, False, 0),))
    Bulbulator._ice_type = _M_SmartHome._t_Bulbulator

    _M_SmartHome.Bulbulator = Bulbulator
    del Bulbulator

if 'FridgeData' not in _M_SmartHome.__dict__:
    _M_SmartHome.FridgeData = Ice.createTempClass()
    class FridgeData(_M_SmartHome.BaseReading):
        def __init__(self, currentTemperature=4, targetTemperature=2, minTargetTemperature=-20, maxTargetTemperature=-20):
            _M_SmartHome.BaseReading.__init__(self)
            self.currentTemperature = currentTemperature
            self.targetTemperature = targetTemperature
            self.minTargetTemperature = minTargetTemperature
            self.maxTargetTemperature = maxTargetTemperature

        def ice_id(self):
            return '::SmartHome::FridgeData'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::FridgeData'

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_FridgeData)

        __repr__ = __str__

    _M_SmartHome._t_FridgeData = IcePy.defineValue('::SmartHome::FridgeData', FridgeData, -1, (), False, False, _M_SmartHome._t_BaseReading, (
        ('currentTemperature', (), IcePy._t_short, False, 0),
        ('targetTemperature', (), IcePy._t_short, False, 0),
        ('minTargetTemperature', (), IcePy._t_short, False, 0),
        ('maxTargetTemperature', (), IcePy._t_short, False, 0)
    ))
    FridgeData._ice_type = _M_SmartHome._t_FridgeData

    _M_SmartHome.FridgeData = FridgeData
    del FridgeData

if 'TargetTemperatureSetting' not in _M_SmartHome.__dict__:
    _M_SmartHome.TargetTemperatureSetting = Ice.createTempClass()
    class TargetTemperatureSetting(_M_SmartHome.BaseSetting):
        def __init__(self, newTargetTemperature=0):
            _M_SmartHome.BaseSetting.__init__(self)
            self.newTargetTemperature = newTargetTemperature

        def ice_id(self):
            return '::SmartHome::TargetTemperatureSetting'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::TargetTemperatureSetting'

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_TargetTemperatureSetting)

        __repr__ = __str__

    _M_SmartHome._t_TargetTemperatureSetting = IcePy.defineValue('::SmartHome::TargetTemperatureSetting', TargetTemperatureSetting, -1, (), False, False, _M_SmartHome._t_BaseSetting, (('newTargetTemperature', (), IcePy._t_short, False, 0),))
    TargetTemperatureSetting._ice_type = _M_SmartHome._t_TargetTemperatureSetting

    _M_SmartHome.TargetTemperatureSetting = TargetTemperatureSetting
    del TargetTemperatureSetting

_M_SmartHome._t_IFridge = IcePy.defineValue('::SmartHome::IFridge', Ice.Value, -1, (), False, True, None, ())

if 'IFridgePrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.IFridgePrx = Ice.createTempClass()
    class IFridgePrx(_M_SmartHome.ISmartDevicePrx):

        def performSelfCheck(self, context=None):
            return _M_SmartHome.IFridge._op_performSelfCheck.invoke(self, ((), context))

        def performSelfCheckAsync(self, context=None):
            return _M_SmartHome.IFridge._op_performSelfCheck.invokeAsync(self, ((), context))

        def begin_performSelfCheck(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.IFridge._op_performSelfCheck.begin(self, ((), _response, _ex, _sent, context))

        def end_performSelfCheck(self, _r):
            return _M_SmartHome.IFridge._op_performSelfCheck.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.IFridgePrx.ice_checkedCast(proxy, '::SmartHome::IFridge', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.IFridgePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::IFridge'
    _M_SmartHome._t_IFridgePrx = IcePy.defineProxy('::SmartHome::IFridge', IFridgePrx)

    _M_SmartHome.IFridgePrx = IFridgePrx
    del IFridgePrx

    _M_SmartHome.IFridge = Ice.createTempClass()
    class IFridge(_M_SmartHome.ISmartDevice):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::IFridge', '::SmartHome::ISmartDevice')

        def ice_id(self, current=None):
            return '::SmartHome::IFridge'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::IFridge'

        def performSelfCheck(self, current=None):
            raise NotImplementedError("servant method 'performSelfCheck' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_IFridgeDisp)

        __repr__ = __str__

    _M_SmartHome._t_IFridgeDisp = IcePy.defineClass('::SmartHome::IFridge', IFridge, (), None, (_M_SmartHome._t_ISmartDeviceDisp,))
    IFridge._ice_type = _M_SmartHome._t_IFridgeDisp

    IFridge._op_performSelfCheck = IcePy.Operation('performSelfCheck', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())

    _M_SmartHome.IFridge = IFridge
    del IFridge

if 'Fridge' not in _M_SmartHome.__dict__:
    _M_SmartHome.Fridge = Ice.createTempClass()
    class Fridge(_M_SmartHome.SmartDevice):
        def __init__(self, deviceData=None, fridgeData=None):
            _M_SmartHome.SmartDevice.__init__(self, deviceData)
            self.fridgeData = fridgeData

        def ice_id(self):
            return '::SmartHome::Fridge'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Fridge'

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_Fridge)

        __repr__ = __str__

    _M_SmartHome._t_Fridge = IcePy.declareValue('::SmartHome::Fridge')

    _M_SmartHome._t_Fridge = IcePy.defineValue('::SmartHome::Fridge', Fridge, -1, (), False, False, _M_SmartHome._t_SmartDevice, (('fridgeData', (), _M_SmartHome._t_FridgeData, False, 0),))
    Fridge._ice_type = _M_SmartHome._t_Fridge

    _M_SmartHome.Fridge = Fridge
    del Fridge

if '_t_Food' not in _M_SmartHome.__dict__:
    _M_SmartHome._t_Food = IcePy.defineSequence('::SmartHome::Food', (), IcePy._t_string)

if 'AutomaticFridgeData' not in _M_SmartHome.__dict__:
    _M_SmartHome.AutomaticFridgeData = Ice.createTempClass()
    class AutomaticFridgeData(_M_SmartHome.BaseReading):
        def __init__(self, presentFood=None):
            _M_SmartHome.BaseReading.__init__(self)
            self.presentFood = presentFood

        def ice_id(self):
            return '::SmartHome::AutomaticFridgeData'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::AutomaticFridgeData'

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_AutomaticFridgeData)

        __repr__ = __str__

    _M_SmartHome._t_AutomaticFridgeData = IcePy.defineValue('::SmartHome::AutomaticFridgeData', AutomaticFridgeData, -1, (), False, False, _M_SmartHome._t_BaseReading, (('presentFood', (), _M_SmartHome._t_Food, False, 0),))
    AutomaticFridgeData._ice_type = _M_SmartHome._t_AutomaticFridgeData

    _M_SmartHome.AutomaticFridgeData = AutomaticFridgeData
    del AutomaticFridgeData

_M_SmartHome._t_IAutomaticFridge = IcePy.defineValue('::SmartHome::IAutomaticFridge', Ice.Value, -1, (), False, True, None, ())

if 'IAutomaticFridgePrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.IAutomaticFridgePrx = Ice.createTempClass()
    class IAutomaticFridgePrx(_M_SmartHome.IFridgePrx):

        def findMissingFood(self, requiredFood, context=None):
            return _M_SmartHome.IAutomaticFridge._op_findMissingFood.invoke(self, ((requiredFood, ), context))

        def findMissingFoodAsync(self, requiredFood, context=None):
            return _M_SmartHome.IAutomaticFridge._op_findMissingFood.invokeAsync(self, ((requiredFood, ), context))

        def begin_findMissingFood(self, requiredFood, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.IAutomaticFridge._op_findMissingFood.begin(self, ((requiredFood, ), _response, _ex, _sent, context))

        def end_findMissingFood(self, _r):
            return _M_SmartHome.IAutomaticFridge._op_findMissingFood.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.IAutomaticFridgePrx.ice_checkedCast(proxy, '::SmartHome::IAutomaticFridge', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.IAutomaticFridgePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::IAutomaticFridge'
    _M_SmartHome._t_IAutomaticFridgePrx = IcePy.defineProxy('::SmartHome::IAutomaticFridge', IAutomaticFridgePrx)

    _M_SmartHome.IAutomaticFridgePrx = IAutomaticFridgePrx
    del IAutomaticFridgePrx

    _M_SmartHome.IAutomaticFridge = Ice.createTempClass()
    class IAutomaticFridge(_M_SmartHome.IFridge):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::IAutomaticFridge', '::SmartHome::IFridge', '::SmartHome::ISmartDevice')

        def ice_id(self, current=None):
            return '::SmartHome::IAutomaticFridge'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::IAutomaticFridge'

        def findMissingFood(self, requiredFood, current=None):
            raise NotImplementedError("servant method 'findMissingFood' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_IAutomaticFridgeDisp)

        __repr__ = __str__

    _M_SmartHome._t_IAutomaticFridgeDisp = IcePy.defineClass('::SmartHome::IAutomaticFridge', IAutomaticFridge, (), None, (_M_SmartHome._t_IFridgeDisp,))
    IAutomaticFridge._ice_type = _M_SmartHome._t_IAutomaticFridgeDisp

    IAutomaticFridge._op_findMissingFood = IcePy.Operation('findMissingFood', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_SmartHome._t_Food, False, 0),), (), ((), _M_SmartHome._t_Food, False, 0), ())

    _M_SmartHome.IAutomaticFridge = IAutomaticFridge
    del IAutomaticFridge

if 'AutomaticFridge' not in _M_SmartHome.__dict__:
    _M_SmartHome.AutomaticFridge = Ice.createTempClass()
    class AutomaticFridge(_M_SmartHome.Fridge):
        def __init__(self, deviceData=None, fridgeData=None, automaticFridgeData=None):
            _M_SmartHome.Fridge.__init__(self, deviceData, fridgeData)
            self.automaticFridgeData = automaticFridgeData

        def ice_id(self):
            return '::SmartHome::AutomaticFridge'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::AutomaticFridge'

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_AutomaticFridge)

        __repr__ = __str__

    _M_SmartHome._t_AutomaticFridge = IcePy.declareValue('::SmartHome::AutomaticFridge')

    _M_SmartHome._t_AutomaticFridge = IcePy.defineValue('::SmartHome::AutomaticFridge', AutomaticFridge, -1, (), False, False, _M_SmartHome._t_Fridge, (('automaticFridgeData', (), _M_SmartHome._t_AutomaticFridgeData, False, 0),))
    AutomaticFridge._ice_type = _M_SmartHome._t_AutomaticFridge

    _M_SmartHome.AutomaticFridge = AutomaticFridge
    del AutomaticFridge

if 'LightMode' not in _M_SmartHome.__dict__:
    _M_SmartHome.LightMode = Ice.createTempClass()
    class LightMode(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    LightMode.off = LightMode("off", 0)
    LightMode.normal = LightMode("normal", 1)
    LightMode.musicSync = LightMode("musicSync", 2)
    LightMode.videoSync = LightMode("videoSync", 3)
    LightMode._enumerators = { 0:LightMode.off, 1:LightMode.normal, 2:LightMode.musicSync, 3:LightMode.videoSync }

    _M_SmartHome._t_LightMode = IcePy.defineEnum('::SmartHome::LightMode', LightMode, (), LightMode._enumerators)

    _M_SmartHome.LightMode = LightMode
    del LightMode

if '_t_SupportedModes' not in _M_SmartHome.__dict__:
    _M_SmartHome._t_SupportedModes = IcePy.defineSequence('::SmartHome::SupportedModes', (), _M_SmartHome._t_LightMode)

if 'LightModeSetting' not in _M_SmartHome.__dict__:
    _M_SmartHome.LightModeSetting = Ice.createTempClass()
    class LightModeSetting(_M_SmartHome.BaseSetting):
        def __init__(self, newMode=_M_SmartHome.LightMode.off):
            _M_SmartHome.BaseSetting.__init__(self)
            self.newMode = newMode

        def ice_id(self):
            return '::SmartHome::LightModeSetting'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::LightModeSetting'

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_LightModeSetting)

        __repr__ = __str__

    _M_SmartHome._t_LightModeSetting = IcePy.defineValue('::SmartHome::LightModeSetting', LightModeSetting, -1, (), False, False, _M_SmartHome._t_BaseSetting, (('newMode', (), _M_SmartHome._t_LightMode, False, 0),))
    LightModeSetting._ice_type = _M_SmartHome._t_LightModeSetting

    _M_SmartHome.LightModeSetting = LightModeSetting
    del LightModeSetting

if 'LightControllerData' not in _M_SmartHome.__dict__:
    _M_SmartHome.LightControllerData = Ice.createTempClass()
    class LightControllerData(_M_SmartHome.BaseReading):
        def __init__(self, activeMode=_M_SmartHome.LightMode.off, supportedModes=None):
            _M_SmartHome.BaseReading.__init__(self)
            self.activeMode = activeMode
            self.supportedModes = supportedModes

        def ice_id(self):
            return '::SmartHome::LightControllerData'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::LightControllerData'

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_LightControllerData)

        __repr__ = __str__

    _M_SmartHome._t_LightControllerData = IcePy.defineValue('::SmartHome::LightControllerData', LightControllerData, -1, (), False, False, _M_SmartHome._t_BaseReading, (
        ('activeMode', (), _M_SmartHome._t_LightMode, False, 0),
        ('supportedModes', (), _M_SmartHome._t_SupportedModes, False, 0)
    ))
    LightControllerData._ice_type = _M_SmartHome._t_LightControllerData

    _M_SmartHome.LightControllerData = LightControllerData
    del LightControllerData

_M_SmartHome._t_ILightController = IcePy.defineValue('::SmartHome::ILightController', Ice.Value, -1, (), False, True, None, ())

if 'ILightControllerPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.ILightControllerPrx = Ice.createTempClass()
    class ILightControllerPrx(_M_SmartHome.ISmartDevicePrx):

        def flash(self, context=None):
            return _M_SmartHome.ILightController._op_flash.invoke(self, ((), context))

        def flashAsync(self, context=None):
            return _M_SmartHome.ILightController._op_flash.invokeAsync(self, ((), context))

        def begin_flash(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.ILightController._op_flash.begin(self, ((), _response, _ex, _sent, context))

        def end_flash(self, _r):
            return _M_SmartHome.ILightController._op_flash.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.ILightControllerPrx.ice_checkedCast(proxy, '::SmartHome::ILightController', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.ILightControllerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::ILightController'
    _M_SmartHome._t_ILightControllerPrx = IcePy.defineProxy('::SmartHome::ILightController', ILightControllerPrx)

    _M_SmartHome.ILightControllerPrx = ILightControllerPrx
    del ILightControllerPrx

    _M_SmartHome.ILightController = Ice.createTempClass()
    class ILightController(_M_SmartHome.ISmartDevice):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::ILightController', '::SmartHome::ISmartDevice')

        def ice_id(self, current=None):
            return '::SmartHome::ILightController'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::ILightController'

        def flash(self, current=None):
            raise NotImplementedError("servant method 'flash' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_ILightControllerDisp)

        __repr__ = __str__

    _M_SmartHome._t_ILightControllerDisp = IcePy.defineClass('::SmartHome::ILightController', ILightController, (), None, (_M_SmartHome._t_ISmartDeviceDisp,))
    ILightController._ice_type = _M_SmartHome._t_ILightControllerDisp

    ILightController._op_flash = IcePy.Operation('flash', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())

    _M_SmartHome.ILightController = ILightController
    del ILightController

if 'LightController' not in _M_SmartHome.__dict__:
    _M_SmartHome.LightController = Ice.createTempClass()
    class LightController(_M_SmartHome.SmartDevice):
        def __init__(self, deviceData=None, lightControllerData=None):
            _M_SmartHome.SmartDevice.__init__(self, deviceData)
            self.lightControllerData = lightControllerData

        def ice_id(self):
            return '::SmartHome::LightController'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::LightController'

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_LightController)

        __repr__ = __str__

    _M_SmartHome._t_LightController = IcePy.declareValue('::SmartHome::LightController')

    _M_SmartHome._t_LightController = IcePy.defineValue('::SmartHome::LightController', LightController, -1, (), False, False, _M_SmartHome._t_SmartDevice, (('lightControllerData', (), _M_SmartHome._t_LightControllerData, False, 0),))
    LightController._ice_type = _M_SmartHome._t_LightController

    _M_SmartHome.LightController = LightController
    del LightController

if '_t_LampIdToStates' not in _M_SmartHome.__dict__:
    _M_SmartHome._t_LampIdToStates = IcePy.defineDictionary('::SmartHome::LampIdToStates', (), IcePy._t_int, IcePy._t_bool)

if 'PremiumLightControllerData' not in _M_SmartHome.__dict__:
    _M_SmartHome.PremiumLightControllerData = Ice.createTempClass()
    class PremiumLightControllerData(_M_SmartHome.BaseReading):
        def __init__(self, lampStates=None):
            _M_SmartHome.BaseReading.__init__(self)
            self.lampStates = lampStates

        def ice_id(self):
            return '::SmartHome::PremiumLightControllerData'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::PremiumLightControllerData'

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_PremiumLightControllerData)

        __repr__ = __str__

    _M_SmartHome._t_PremiumLightControllerData = IcePy.defineValue('::SmartHome::PremiumLightControllerData', PremiumLightControllerData, -1, (), False, False, _M_SmartHome._t_BaseReading, (('lampStates', (), _M_SmartHome._t_LampIdToStates, False, 0),))
    PremiumLightControllerData._ice_type = _M_SmartHome._t_PremiumLightControllerData

    _M_SmartHome.PremiumLightControllerData = PremiumLightControllerData
    del PremiumLightControllerData

if 'LampStatesSetting' not in _M_SmartHome.__dict__:
    _M_SmartHome.LampStatesSetting = Ice.createTempClass()
    class LampStatesSetting(_M_SmartHome.BaseSetting):
        def __init__(self, newStates=None):
            _M_SmartHome.BaseSetting.__init__(self)
            self.newStates = newStates

        def ice_id(self):
            return '::SmartHome::LampStatesSetting'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::LampStatesSetting'

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_LampStatesSetting)

        __repr__ = __str__

    _M_SmartHome._t_LampStatesSetting = IcePy.defineValue('::SmartHome::LampStatesSetting', LampStatesSetting, -1, (), False, False, _M_SmartHome._t_BaseSetting, (('newStates', (), _M_SmartHome._t_LampIdToStates, False, 0),))
    LampStatesSetting._ice_type = _M_SmartHome._t_LampStatesSetting

    _M_SmartHome.LampStatesSetting = LampStatesSetting
    del LampStatesSetting

_M_SmartHome._t_IPremiumLightController = IcePy.defineValue('::SmartHome::IPremiumLightController', Ice.Value, -1, (), False, True, None, ())

if 'IPremiumLightControllerPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.IPremiumLightControllerPrx = Ice.createTempClass()
    class IPremiumLightControllerPrx(_M_SmartHome.ILightControllerPrx):

        def colorfulFlash(self, color, context=None):
            return _M_SmartHome.IPremiumLightController._op_colorfulFlash.invoke(self, ((color, ), context))

        def colorfulFlashAsync(self, color, context=None):
            return _M_SmartHome.IPremiumLightController._op_colorfulFlash.invokeAsync(self, ((color, ), context))

        def begin_colorfulFlash(self, color, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.IPremiumLightController._op_colorfulFlash.begin(self, ((color, ), _response, _ex, _sent, context))

        def end_colorfulFlash(self, _r):
            return _M_SmartHome.IPremiumLightController._op_colorfulFlash.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.IPremiumLightControllerPrx.ice_checkedCast(proxy, '::SmartHome::IPremiumLightController', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.IPremiumLightControllerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::IPremiumLightController'
    _M_SmartHome._t_IPremiumLightControllerPrx = IcePy.defineProxy('::SmartHome::IPremiumLightController', IPremiumLightControllerPrx)

    _M_SmartHome.IPremiumLightControllerPrx = IPremiumLightControllerPrx
    del IPremiumLightControllerPrx

    _M_SmartHome.IPremiumLightController = Ice.createTempClass()
    class IPremiumLightController(_M_SmartHome.ILightController):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::ILightController', '::SmartHome::IPremiumLightController', '::SmartHome::ISmartDevice')

        def ice_id(self, current=None):
            return '::SmartHome::IPremiumLightController'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::IPremiumLightController'

        def colorfulFlash(self, color, current=None):
            raise NotImplementedError("servant method 'colorfulFlash' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_IPremiumLightControllerDisp)

        __repr__ = __str__

    _M_SmartHome._t_IPremiumLightControllerDisp = IcePy.defineClass('::SmartHome::IPremiumLightController', IPremiumLightController, (), None, (_M_SmartHome._t_ILightControllerDisp,))
    IPremiumLightController._ice_type = _M_SmartHome._t_IPremiumLightControllerDisp

    IPremiumLightController._op_colorfulFlash = IcePy.Operation('colorfulFlash', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_string, False, 0), ())

    _M_SmartHome.IPremiumLightController = IPremiumLightController
    del IPremiumLightController

if 'PremiumLightController' not in _M_SmartHome.__dict__:
    _M_SmartHome.PremiumLightController = Ice.createTempClass()
    class PremiumLightController(_M_SmartHome.LightController):
        def __init__(self, deviceData=None, lightControllerData=None, premiumLightControllerData=None):
            _M_SmartHome.LightController.__init__(self, deviceData, lightControllerData)
            self.premiumLightControllerData = premiumLightControllerData

        def ice_id(self):
            return '::SmartHome::PremiumLightController'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::PremiumLightController'

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_PremiumLightController)

        __repr__ = __str__

    _M_SmartHome._t_PremiumLightController = IcePy.declareValue('::SmartHome::PremiumLightController')

    _M_SmartHome._t_PremiumLightController = IcePy.defineValue('::SmartHome::PremiumLightController', PremiumLightController, -1, (), False, False, _M_SmartHome._t_LightController, (('premiumLightControllerData', (), _M_SmartHome._t_PremiumLightControllerData, False, 0),))
    PremiumLightController._ice_type = _M_SmartHome._t_PremiumLightController

    _M_SmartHome.PremiumLightController = PremiumLightController
    del PremiumLightController

# End of module SmartHome
